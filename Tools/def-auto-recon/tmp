#!/usr/bin/python3

import os
import re
import subprocess

# Define color codes
RESET = "\033[0m"
GREEN = "\033[92m"
RED = "\033[91m"

def print_colored(message, color=RESET):
    print(f"{color}{message}{RESET}")

print_colored("[+] Def-Auto-Recon initialized...", GREEN)

# Get user domain input
domain = input(f"Enter Target Domain: {RED}").strip()

# Create 'files' and 'Recycle-Bin' directories if they don't exist
if not os.path.exists("files"):
    os.mkdir("files")
    print_colored(f"[+] '{RED}files{RESET}' directory created.", GREEN)
if not os.path.exists("Recycle-Bin"):
    os.mkdir("Recycle-Bin")
    print_colored(f"[+] '{RED}Recycle-Bin{RESET}' directory created.", GREEN)

# Find subdomains using crt.sh
print_colored(f"[+] Crt.sh Subdomains search starting for: {domain}", GREEN)
crt_sh_command = f"curl -s https://crt.sh/?q={domain} | grep -oE '[a-zA-Z0-9.-]+\\.{domain}'"
crt_sh_file = f"files/crt.sh.{domain}.active.txt"
with open(crt_sh_file, 'w') as file:
    subprocess.run(crt_sh_command, shell=True, stdout=file)
print_colored("[+] crt.sh Subdomain search complete.", GREEN)

# Filter valid subdomains from crt.sh results
print_colored(f"[+] Filtering subdomains for: {domain}", GREEN)
with open(crt_sh_file, 'r') as file:
    lines = file.readlines()
    ai_domains = [
        line.strip() for line in lines
        if line.strip().endswith(f'.{domain}') or line.strip().startswith(f'*.{domain}')
    ]
with open(f'files/crt.sh.{domain}.subdomains.txt', 'w') as output_file:
    output_file.writelines('\n'.join(ai_domains) + '\n')
print_colored(f"Filtered subdomains saved to 'files/crt.sh.{domain}.subdomains.txt'", GREEN)

# Move the crt.sh file to Recycle-Bin
os.rename(crt_sh_file, f'Recycle-Bin/{os.path.basename(crt_sh_file)}')
print_colored(f"[+] Temporary file moved to 'Recycle-Bin/'", GREEN)

# Find subdomains using TheHarvester
print_colored(f"[+] TheHarvester subdomain search starting for: {domain}", GREEN)
theharvester_file = f"files/TheHarvester.{domain}.active.txt"
try:
    subprocess.run(f"theHarvester -d {domain} -b all | tee {theharvester_file}", shell=True, check=True)
    print_colored("[+] TheHarvester Subdomain search complete.", GREEN)
except subprocess.CalledProcessError as e:
    print_colored(f"[-] Error running TheHarvester: {e}", RED)

# Define patterns for extraction
subdomain_pattern = re.compile(r'\b(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}\b')
ip_pattern = re.compile(r'\b(?:\d{1,3}\.){3}\d{1,3}\b|\b(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}\b')
email_pattern = re.compile(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b')

def extract_info(file_path):
    # Initialize sets to store unique values
    subdomains = set()
    ips = set()
    emails = set()
    
    # Read file and extract information
    try:
        with open(file_path, 'r') as file:
            text = file.read()
            subdomains.update(subdomain_pattern.findall(text))
            ips.update(ip_pattern.findall(text))
            emails.update(email_pattern.findall(text))
    except Exception as e:
        print_colored(f"[-] Error reading file: {e}", RED)
    
    return subdomains, ips, emails

def write_to_file(file_name, data):
    try:
        with open(file_name, 'w') as file:
            for item in sorted(data):
                file.write(item + '\n')
        print_colored(f"[+] Data written to {file_name}", GREEN)
    except Exception as e:
        print_colored(f"[-] Error writing to file: {e}", RED)

def main():
    file_path = theharvester_file  # File from TheHarvester
    subdomains, ips, emails = extract_info(file_path)
    
    # Only include subdomains that match the domain or wildcard domain
    filtered_subdomains = [
        sd for sd in subdomains
        if sd.endswith(f'.{domain}') or sd.startswith(f'*.{domain}')
    ]
    
    write_to_file(f'files/{domain}.subdomains.txt', filtered_subdomains)
    write_to_file(f'files/{domain}.ips.txt', ips)
    write_to_file(f'files/{domain}.emails.txt', emails)

    # Move the TheHarvester file to Recycle-Bin
    os.rename(theharvester_file, f'Recycle-Bin/{os.path.basename(theharvester_file)}')
    print_colored(f"[+] Temporary file moved to 'Recycle-Bin'", GREEN)

if __name__ == "__main__":
    main()
